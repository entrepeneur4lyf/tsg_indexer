;; -*- coding: utf-8 -*-
;; ------------------------------------------------------------------------------------------------
;; Copyright Â© 2023, tsg_indexer authors.
;; Licensed under either of Apache License, Version 2.0, or MIT license, at your option.
;; ------------------------------------------------------------------------------------------------

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Stack graphs definition for Objective-C
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Global Variables
;; ^^^^^^^^^^^^^^^^

global FILE_PATH           ; project relative path of this file
global PROJECT_NAME = ""   ; project name, used to isolate different projects in the same stack graph
global ROOT_PATH = ""      ; path to the project root directory

global JUMP_TO_SCOPE_NODE
global ROOT_NODE
global SCOPE_ROOT

;; Attribute Shorthands
;; ^^^^^^^^^^^^^^^^^^^^

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

;; Root Node
;; ^^^^^^^^^

(translation_unit) @root {
  node @root.defs
  node @root.exports
  node @root.lexical_defs
  node @root.lexical_scope
  node @root.type_scope
  node @root.namespace_scope
  
  ; Connect source file to global scope
  edge @root.lexical_scope -> SCOPE_ROOT
  edge @root.lexical_scope -> @root.defs
}

;; Import Declarations
;; ^^^^^^^^^^^^^^^^^

(preproc_import
  path: (system_lib_string) @path) @import_system {
  node @import_system.defs
  node import_def
  
  ; Extract file path from the system_lib_string
  let file_path = (source-text @path)
  ; Remove < and >
  let clean_path = (replace file_path "<" "")
  let clean_path = (replace clean_path ">" "")
  
  ; Define the import
  attr (import_def) pop_symbol = clean_path, is_definition, source_node = @import_system
  attr (import_def) syntax_type = "import"
  
  ; Connect import to parent scope
  edge @import_system.after_scope -> import_def
}

(preproc_import
  path: (string_literal) @path) @import_local {
  node @import_local.defs
  node import_def
  
  ; Extract file path from the string_literal
  let file_path = (source-text @path)
  ; Remove quotes
  let clean_path = (replace file_path "\"" "")
  
  ; Define the import
  attr (import_def) pop_symbol = clean_path, is_definition, source_node = @import_local
  attr (import_def) syntax_type = "import"
  
  ; Connect import to parent scope
  edge @import_local.after_scope -> import_def
}

(module_import_declaration
  name: (identifier) @name) @module_import {
  node @module_import.defs
  node import_def
  
  ; Define the module import
  attr (import_def) pop_symbol = (source-text @name), is_definition, source_node = @module_import
  attr (import_def) syntax_type = "module_import"
  
  ; Connect module import to parent scope
  edge @module_import.after_scope -> import_def
}

;; Class Interface Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^^

(class_interface
  name: (identifier) @name
  superclass: (superclass_reference)? @superclass
  protocols: (protocol_reference_list)? @protocols
  body: (declaration_list) @body) @interface {
  node @interface.defs
  node @interface.exports
  node @interface.lexical_scope
  node @interface.type_scope
  node @interface.drop_scope
  
  ; Define the class
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @interface
  attr (@name.def) syntax_type = "class"
  
  ; Connect class to parent scope
  edge @interface.lexical_scope -> @interface.before_scope
  edge @interface.lexical_scope -> @interface.defs
  
  ; Connect the class definition
  edge @interface.after_scope -> @name.def
  
  ; Connect to superclass if present
  if present @superclass {
    edge @name.def -> @superclass.ref
  }
  
  ; Connect to protocols if present
  if present @protocols {
    edge @name.def -> @protocols.ref
  }
  
  ; Connect class body to class definition
  edge @body.before_scope -> @interface.lexical_scope
  
  ; Handle class scope
  edge @interface.drop_scope -> @interface.bottom
  attr (@interface.drop_scope) type = "drop_scopes"
  
  ; Classes are exported
  attr (@name.def) is_exported
}

;; Class Implementation Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(class_implementation
  name: (identifier) @name
  superclass: (superclass_reference)? @superclass
  body: (declaration_list) @body) @implementation {
  node @implementation.defs
  node @implementation.lexical_scope
  node @implementation.drop_scope
  
  ; Define the class implementation
  attr (@name.ref) node_reference = @name
  
  ; Connect implementation to parent scope
  edge @implementation.lexical_scope -> @implementation.before_scope
  edge @implementation.lexical_scope -> @implementation.defs
  
  ; Connect implementation to the class name
  edge @implementation.after_scope -> @name.ref
  
  ; Connect to superclass if present
  if present @superclass {
    edge @name.ref -> @superclass.ref
  }
  
  ; Connect implementation body to implementation
  edge @body.before_scope -> @implementation.lexical_scope
  
  ; Handle implementation scope
  edge @implementation.drop_scope -> @implementation.bottom
  attr (@implementation.drop_scope) type = "drop_scopes"
}

;; Category Interface Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^

(category_interface
  name: (identifier) @class_name
  category_name: (identifier) @category_name
  protocols: (protocol_reference_list)? @protocols
  body: (declaration_list) @body) @category {
  node @category.defs
  node @category.exports
  node @category.lexical_scope
  node @category.drop_scope
  
  ; Define the category
  attr (@category_name.def) node_definition = @category_name
  attr (@category_name.def) definiens_node = @category
  attr (@category_name.def) syntax_type = "category"
  
  ; Connect category to parent scope
  edge @category.lexical_scope -> @category.before_scope
  edge @category.lexical_scope -> @category.defs
  
  ; Connect the category definition
  edge @category.after_scope -> @category_name.def
  
  ; Connect category to class
  edge @category_name.def -> @class_name.ref
  
  ; Connect to protocols if present
  if present @protocols {
    edge @category_name.def -> @protocols.ref
  }
  
  ; Connect category body to category definition
  edge @body.before_scope -> @category.lexical_scope
  
  ; Handle category scope
  edge @category.drop_scope -> @category.bottom
  attr (@category.drop_scope) type = "drop_scopes"
  
  ; Categories are exported
  attr (@category_name.def) is_exported
}

;; Category Implementation Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(category_implementation
  name: (identifier) @class_name
  category_name: (identifier) @category_name
  body: (declaration_list) @body) @category_impl {
  node @category_impl.defs
  node @category_impl.lexical_scope
  node @category_impl.drop_scope
  
  ; Reference the category
  attr (@category_name.ref) node_reference = @category_name
  
  ; Connect implementation to parent scope
  edge @category_impl.lexical_scope -> @category_impl.before_scope
  edge @category_impl.lexical_scope -> @category_impl.defs
  
  ; Connect implementation to the category name
  edge @category_impl.after_scope -> @category_name.ref
  
  ; Connect category implementation to class
  edge @category_name.ref -> @class_name.ref
  
  ; Connect implementation body to implementation
  edge @body.before_scope -> @category_impl.lexical_scope
  
  ; Handle implementation scope
  edge @category_impl.drop_scope -> @category_impl.bottom
  attr (@category_impl.drop_scope) type = "drop_scopes"
}

;; Protocol Declaration
;; ^^^^^^^^^^^^^^^^^

(protocol_declaration
  name: (identifier) @name
  protocols: (protocol_reference_list)? @protocols
  body: (declaration_list) @body) @protocol {
  node @protocol.defs
  node @protocol.exports
  node @protocol.lexical_scope
  node @protocol.type_scope
  node @protocol.drop_scope
  
  ; Define the protocol
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @protocol
  attr (@name.def) syntax_type = "protocol"
  
  ; Connect protocol to parent scope
  edge @protocol.lexical_scope -> @protocol.before_scope
  edge @protocol.lexical_scope -> @protocol.defs
  
  ; Connect the protocol definition
  edge @protocol.after_scope -> @name.def
  
  ; Connect to referenced protocols if present
  if present @protocols {
    edge @name.def -> @protocols.ref
  }
  
  ; Connect protocol body to protocol definition
  edge @body.before_scope -> @protocol.lexical_scope
  
  ; Handle protocol scope
  edge @protocol.drop_scope -> @protocol.bottom
  attr (@protocol.drop_scope) type = "drop_scopes"
  
  ; Protocols are exported
  attr (@name.def) is_exported
}

;; Instance Method Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^

(instance_method_declaration
  name: (selector) @selector
  parameters: (method_parameters) @params
  body: (compound_statement)? @body) @method {
  node @method.defs
  node @method.exports
  node @method.lexical_scope
  node @method.call
  node @method.return_value
  node @method.drop_scope
  
  ; Define the method using the selector
  attr (@selector.def) node_definition = @selector
  attr (@selector.def) definiens_node = @method
  attr (@selector.def) syntax_type = "instance_method"
  
  ; Connect method to parent scope
  edge @method.lexical_scope -> @method.before_scope
  edge @method.lexical_scope -> @method.defs
  
  ; Connect the method definition
  edge @method.after_scope -> @selector.def
  edge @selector.def -> @method.call
  
  ; Connect method parameters
  edge @params.before_scope -> @method.lexical_scope
  
  ; Connect method body if present
  if present @body {
    edge @body.before_scope -> @params.after_scope
  }
  
  ; Connect method calls
  edge @method.call -> @method.return_value
  edge @method.drop_scope -> @method.bottom
  
  ; Set node attributes
  attr (@method.drop_scope) type = "drop_scopes"
  attr (@method.return_value) is_exported
  
  ; Instance methods are exported
  attr (@selector.def) is_exported
}

;; Class Method Declaration
;; ^^^^^^^^^^^^^^^^^^^^^

(class_method_declaration
  name: (selector) @selector
  parameters: (method_parameters) @params
  body: (compound_statement)? @body) @class_method {
  node @class_method.defs
  node @class_method.exports
  node @class_method.lexical_scope
  node @class_method.call
  node @class_method.return_value
  node @class_method.drop_scope
  
  ; Define the class method using the selector
  attr (@selector.def) node_definition = @selector
  attr (@selector.def) definiens_node = @class_method
  attr (@selector.def) syntax_type = "class_method"
  
  ; Connect method to parent scope
  edge @class_method.lexical_scope -> @class_method.before_scope
  edge @class_method.lexical_scope -> @class_method.defs
  
  ; Connect the method definition
  edge @class_method.after_scope -> @selector.def
  edge @selector.def -> @class_method.call
  
  ; Connect method parameters
  edge @params.before_scope -> @class_method.lexical_scope
  
  ; Connect method body if present
  if present @body {
    edge @body.before_scope -> @params.after_scope
  }
  
  ; Connect method calls
  edge @class_method.call -> @class_method.return_value
  edge @class_method.drop_scope -> @class_method.bottom
  
  ; Set node attributes
  attr (@class_method.drop_scope) type = "drop_scopes"
  attr (@class_method.return_value) is_exported
  
  ; Class methods are exported
  attr (@selector.def) is_exported
}

;; Method Parameters
;; ^^^^^^^^^^^^^^^

(method_parameters) @params {
  node @params.before_scope
  node @params.after_scope
}

(method_parameter
  type: (_) @type
  name: (identifier) @name) @param {
  ; Define the parameter
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @param
  attr (@name.def) syntax_type = "parameter"
  
  ; Connect parameter to params list
  edge @params.after_scope -> @name.def
}

;; Function Definition
;; ^^^^^^^^^^^^^^^^^

(function_definition
  name: (identifier) @name
  parameters: (parameter_list) @params
  body: (compound_statement) @body) @function {
  node @function.defs
  node @function.exports
  node @function.lexical_scope
  node @function.call
  node @function.return_value
  node @function.drop_scope
  
  ; Define the function
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @function
  attr (@name.def) syntax_type = "function"
  
  ; Connect function to parent scope
  edge @function.lexical_scope -> @function.before_scope
  edge @function.lexical_scope -> @function.defs
  
  ; Connect the function definition
  edge @function.after_scope -> @name.def
  edge @name.def -> @function.call
  
  ; Connect function parameters and body
  edge @params.before_scope -> @function.lexical_scope
  edge @body.before_scope -> @params.after_scope
  
  ; Connect function calls
  edge @function.call -> @function.return_value
  edge @function.drop_scope -> @function.bottom
  
  ; Set node attributes
  attr (@function.call) pop_scoped_symbol = "()"
  attr (@function.drop_scope) type = "drop_scopes"
  attr (@function.return_value) is_exported
  
  ; Functions are exported
  attr (@name.def) is_exported
}

;; Function Declaration
;; ^^^^^^^^^^^^^^^^^

(function_declarator
  name: (identifier) @name
  parameters: (parameter_list) @params) @func_decl {
  node @func_decl.defs
  node @func_decl.exports
  
  ; Define the function declaration
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @func_decl
  attr (@name.def) syntax_type = "function_declaration"
  
  ; Connect the function declaration
  edge @func_decl.after_scope -> @name.def
  
  ; Connect function parameters
  edge @params.before_scope -> @func_decl.before_scope
  
  ; Function declarations are exported
  attr (@name.def) is_exported
}

;; Function Parameters
;; ^^^^^^^^^^^^^^^^^

(parameter_list) @params {
  node @params.before_scope
  node @params.after_scope
}

(parameter_declaration
  name: (identifier) @name) @param {
  ; Define the parameter
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @param
  attr (@name.def) syntax_type = "parameter"
  
  ; Connect parameter to params list
  edge @params.after_scope -> @name.def
}

;; Property Declaration
;; ^^^^^^^^^^^^^^^^^

(property_declaration
  attributes: (property_attributes)?
  type: (_)
  name: (identifier) @name) @property {
  ; Define the property
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @property
  attr (@name.def) syntax_type = "property"
  
  ; Connect property to parent scope
  edge @property.after_scope -> @name.def
  
  ; Properties are exported
  attr (@name.def) is_exported
}

;; Instance Variable Declaration
;; ^^^^^^^^^^^^^^^^^^^^^^^^^^

(instance_variable_declaration
  type: (_)
  name: (identifier) @name) @ivar {
  ; Define the instance variable
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @ivar
  attr (@name.def) syntax_type = "instance_variable"
  
  ; Connect instance variable to parent scope
  edge @ivar.after_scope -> @name.def
}

;; Typedef Declaration
;; ^^^^^^^^^^^^^^^^^

(typedef_declaration
  name: (type_identifier) @name) @typedef {
  ; Define the typedef
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @typedef
  attr (@name.def) syntax_type = "typedef"
  
  ; Connect typedef to parent scope
  edge @typedef.after_scope -> @name.def
  
  ; Typedefs are exported
  attr (@name.def) is_exported
}

;; Struct Declaration
;; ^^^^^^^^^^^^^^^^

(struct_specifier
  name: (type_identifier) @name
  body: (field_declaration_list) @body) @struct {
  node @struct.defs
  node @struct.lexical_scope
  
  ; Define the struct
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @struct
  attr (@name.def) syntax_type = "struct"
  
  ; Connect struct to parent scope
  edge @struct.lexical_scope -> @struct.before_scope
  edge @struct.lexical_scope -> @struct.defs
  
  ; Connect the struct definition
  edge @struct.after_scope -> @name.def
  
  ; Connect struct body to struct definition
  edge @body.before_scope -> @struct.lexical_scope
  
  ; Structs are exported
  attr (@name.def) is_exported
}

;; Enum Declaration
;; ^^^^^^^^^^^^^^

(enum_specifier
  name: (type_identifier) @name
  body: (enumerator_list) @body) @enum {
  node @enum.defs
  node @enum.lexical_scope
  
  ; Define the enum
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @enum
  attr (@name.def) syntax_type = "enum"
  
  ; Connect enum to parent scope
  edge @enum.lexical_scope -> @enum.before_scope
  edge @enum.lexical_scope -> @enum.defs
  
  ; Connect the enum definition
  edge @enum.after_scope -> @name.def
  
  ; Connect enum body to enum definition
  edge @body.before_scope -> @enum.lexical_scope
  
  ; Enums are exported
  attr (@name.def) is_exported
}

;; Enumerator
;; ^^^^^^^^^

(enumerator
  name: (identifier) @name) @enum_value {
  ; Define the enum value
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @enum_value
  attr (@name.def) syntax_type = "enum_value"
  
  ; Connect enum value to parent enum
  edge @enum_value.after_scope -> @name.def
  
  ; Enum values are exported
  attr (@name.def) is_exported
}

;; Method Invocation
;; ^^^^^^^^^^^^^^^

(message_expression
  receiver: (_) @receiver
  selector: (selector) @selector) @message {
  node @message.ref
  
  ; Reference the method selector
  attr (@message.ref) node_reference = @selector
  
  ; Connect message to receiver
  edge @message.ref -> @receiver.ref
}

;; Function Call
;; ^^^^^^^^^^^^

(call_expression
  function: (identifier) @func
  arguments: (argument_list) @args) @call {
  node @call.ref
  
  ; Reference the function
  attr (@call.ref) node_reference = @func
  
  ; Connect call to arguments
  edge @args.before_scope -> @call.before_scope
}

;; Variable Declarations
;; ^^^^^^^^^^^^^^^^^^^

(declaration
  type: (_)
  declarator: (identifier) @name
  value: (_)? @value) @var_decl {
  node @var_decl.defs
  
  ; Define the variable
  attr (@name.def) node_definition = @name
  attr (@name.def) definiens_node = @var_decl
  attr (@name.def) syntax_type = "variable"
  
  ; Connect variable to parent scope
  edge @var_decl.after_scope -> @name.def
  
  ; Connect initializer if present
  if present @value {
    edge @value.before_scope -> @var_decl.before_scope
  }
  
  ; Global variables are exported
  if not-in-scope "function_definition" "instance_method_declaration" "class_method_declaration" "for_statement" "compound_statement" {
    attr (@name.def) is_exported
  }
}

;; Identifiers and References
;; ^^^^^^^^^^^^^^^^^^^^^^^^

(identifier) @id {
  node @id.ref
  node @id.def
  
  ; Reference the identifier
  attr (@id.ref) node_reference = @id
  
  ; Connect reference to scope
  edge @id.ref -> @id.before_scope
}

(type_identifier) @type {
  node @type.ref
  node @type.def
  
  ; Reference the type
  attr (@type.ref) node_reference = @type
  
  ; Connect type reference to scope
  edge @type.ref -> @type.before_scope
}

;; Block Structure
;; ^^^^^^^^^^^^^

(compound_statement) @block {
  node @block.before_scope
  node @block.after_scope
  node @block.defs
  
  ; Connect block to parent scope and its own scope
  edge @block.before_scope -> @block.defs
}

(compound_statement (_) @stmt .) @block {
  ; Connect first statement to block
  edge @block.after_scope -> @stmt.after_scope
}

(compound_statement (_) @stmt1 . (_) @stmt2) {
  ; Connect statements in sequence
  edge @stmt2.before_scope -> @stmt1.after_scope
}

(compound_statement . (_) @stmt) @block {
  ; Connect block to its first statement
  edge @stmt.before_scope -> @block.before_scope
}

;; Block Literals (Objective-C blocks)
;; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(block_literal_expression
  parameters: (parameter_list)? @params
  body: (compound_statement) @body) @block_literal {
  node @block_literal.defs
  node @block_literal.lexical_scope
  node @block_literal.drop_scope
  
  ; Connect block literal to parent scope
  edge @block_literal.lexical_scope -> @block_literal.before_scope
  edge @block_literal.lexical_scope -> @block_literal.defs
  
  ; Connect parameters if present
  if present @params {
    edge @params.before_scope -> @block_literal.lexical_scope
    edge @body.before_scope -> @params.after_scope
  } else {
    ; If no parameters, connect body directly
    edge @body.before_scope -> @block_literal.lexical_scope
  }
  
  ; Handle block scope
  edge @block_literal.drop_scope -> @block_literal.bottom
  attr (@block_literal.drop_scope) type = "drop_scopes"
}

;; For Loop
;; ^^^^^^^

(for_statement
  body: (compound_statement) @body) @for {
  node @for.defs
  node @for.lexical_scope
  
  ; Connect for loop to parent scope
  edge @for.lexical_scope -> @for.before_scope
  edge @for.lexical_scope -> @for.defs
  
  ; Connect body to for loop
  edge @body.before_scope -> @for.lexical_scope
}

;; The End
;; ^^^^^^